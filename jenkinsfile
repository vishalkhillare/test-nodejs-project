pipeline {
    agent any

    environment {
        SSH_KEY = credentials('b5486a2e-0e3d-4f64-b7ac-df9d8e27a7d8') // Replace with your actual SSH key ID
        REMOTE_USER = 'ubuntu' // Replace with your actual SSH username for the AWS EC2 instance
        REMOTE_HOST = '3.110.86.72' // Replace with your actual AWS EC2 public IP
        REMOTE_DIR = '/home/ubuntu' // Replace with the actual path on your AWS EC2 instance
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building the app.js application...'
                bat label: 'npm install', script: '"C:\\Program Files\\nodejs\\npm" install'
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat label: 'npm test', script: '"C:\\Program Files\\nodejs\\npm" test'
                echo "Tests completed successfully"
            }
        }

        stage('Deploy to Development') {
            when {
                branch 'dev-test-nodejs'
            }
            steps {
                echo 'Deploying the Node.js application to development environment...'
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: SSH_KEY, keyFileVariable: 'SSH_KEY_FILE')]) {
                        bat "scp -i ${SSH_KEY_FILE} -r . ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}"
                    }
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'prod-test-nodejs'
            }
            steps {
                echo 'Deploying the Node.js application to production environment...'
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: SSH_KEY, keyFileVariable: 'SSH_KEY_FILE')]) {
                        bat "scp -i ${SSH_KEY_FILE} -r . ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_DIR}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
